struct Output {
	float4 color : COLOR;
};

float3 rgb2hsv(float4 RGBAmodel : COLOR) {
	float hue, saturation, value;

	vec4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	vec4 p = lerp(float4(RGBAmodel.bg, K.wz), float4(RGBAmodel.gb, K.xy), step(RGBAmodel.b, RGBAmodel.g));
	vec4 q = lerp(float4(p.xyw, RGBAmodel.r), float4(RGBAmodel.r, p.yzx), step(p.x, RGBAmodel.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;

	hue = abs(q.z + (q.w - q.y) / (6.0 * d + e));
	saturation = d / (q.x + e);
	value = q.x;

	return float3(hue, saturation, value);
}

float3 hsv2rgb(float3 HSVmodel)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(HSVmodel.xxx + K.xyz) * 6.0 - K.www);
	return HSVmodel.z * lerp(K.xxx, saturate(p - K.xxx), HSVmodel.y);
}

Output main_function(float2 texCoord : TEXCOORD0,
			   sampler2D decal : TEX0,
			   uniform float userSaturation)
{
	Output OUT;
	float3 HSV;

	OUT.color = tex2D(decal,texCoord);

	// change only "blue" pixels
	if (OUT.color.b > 0.5f) {
		HSV = rgb2hsv(float4(OUT.color));
		HSV[1] = HSV[1] * userSaturation;
		OUT.color = float4(hsv2rgb(HSV), 1);
	}

	return OUT;
}
